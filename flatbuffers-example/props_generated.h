// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROPS_PROPSFB_H_
#define FLATBUFFERS_GENERATED_PROPS_PROPSFB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace PropsFB {

struct PropDict;
struct PropDictBuilder;

struct PropsRow;
struct PropsRowBuilder;

struct PropsPool;
struct PropsPoolBuilder;

enum PropType : int8_t {
  PropType_Bool = 0,
  PropType_UInt64 = 1,
  PropType_String = 2,
  PropType_MIN = PropType_Bool,
  PropType_MAX = PropType_String
};

inline const PropType (&EnumValuesPropType())[3] {
  static const PropType values[] = {
    PropType_Bool,
    PropType_UInt64,
    PropType_String
  };
  return values;
}

inline const char * const *EnumNamesPropType() {
  static const char * const names[4] = {
    "Bool",
    "UInt64",
    "String",
    nullptr
  };
  return names;
}

inline const char *EnumNamePropType(PropType e) {
  if (::flatbuffers::IsOutRange(e, PropType_Bool, PropType_String)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPropType()[index];
}

struct PropDict FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PropDictBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_SCOPE = 6,
    VT_KEY = 8,
    VT_VALUE = 10
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *scope() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SCOPE);
  }
  const ::flatbuffers::String *key() const {
    return GetPointer<const ::flatbuffers::String *>(VT_KEY);
  }
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_SCOPE) &&
           verifier.VerifyString(scope()) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct PropDictBuilder {
  typedef PropDict Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(PropDict::VT_NAME, name);
  }
  void add_scope(::flatbuffers::Offset<::flatbuffers::String> scope) {
    fbb_.AddOffset(PropDict::VT_SCOPE, scope);
  }
  void add_key(::flatbuffers::Offset<::flatbuffers::String> key) {
    fbb_.AddOffset(PropDict::VT_KEY, key);
  }
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(PropDict::VT_VALUE, value);
  }
  explicit PropDictBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PropDict> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PropDict>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PropDict> CreatePropDict(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> scope = 0,
    ::flatbuffers::Offset<::flatbuffers::String> key = 0,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0) {
  PropDictBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_key(key);
  builder_.add_scope(scope);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PropDict> CreatePropDictDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *scope = nullptr,
    const char *key = nullptr,
    const char *value = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto scope__ = scope ? _fbb.CreateString(scope) : 0;
  auto key__ = key ? _fbb.CreateString(key) : 0;
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return PropsFB::CreatePropDict(
      _fbb,
      name__,
      scope__,
      key__,
      value__);
}

struct PropsRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PropsRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROP_TYPE = 4,
    VT_PROP_UID = 6,
    VT_PARENT_UID = 8,
    VT_KEY_VALUE = 10
  };
  PropsFB::PropType prop_type() const {
    return static_cast<PropsFB::PropType>(GetField<int8_t>(VT_PROP_TYPE, 0));
  }
  uint64_t prop_uid() const {
    return GetField<uint64_t>(VT_PROP_UID, 0);
  }
  uint64_t parent_uid() const {
    return GetField<uint64_t>(VT_PARENT_UID, 0);
  }
  const PropsFB::PropDict *key_value() const {
    return GetPointer<const PropsFB::PropDict *>(VT_KEY_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_PROP_TYPE, 1) &&
           VerifyField<uint64_t>(verifier, VT_PROP_UID, 8) &&
           VerifyField<uint64_t>(verifier, VT_PARENT_UID, 8) &&
           VerifyOffset(verifier, VT_KEY_VALUE) &&
           verifier.VerifyTable(key_value()) &&
           verifier.EndTable();
  }
};

struct PropsRowBuilder {
  typedef PropsRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_prop_type(PropsFB::PropType prop_type) {
    fbb_.AddElement<int8_t>(PropsRow::VT_PROP_TYPE, static_cast<int8_t>(prop_type), 0);
  }
  void add_prop_uid(uint64_t prop_uid) {
    fbb_.AddElement<uint64_t>(PropsRow::VT_PROP_UID, prop_uid, 0);
  }
  void add_parent_uid(uint64_t parent_uid) {
    fbb_.AddElement<uint64_t>(PropsRow::VT_PARENT_UID, parent_uid, 0);
  }
  void add_key_value(::flatbuffers::Offset<PropsFB::PropDict> key_value) {
    fbb_.AddOffset(PropsRow::VT_KEY_VALUE, key_value);
  }
  explicit PropsRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PropsRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PropsRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PropsRow> CreatePropsRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    PropsFB::PropType prop_type = PropsFB::PropType_Bool,
    uint64_t prop_uid = 0,
    uint64_t parent_uid = 0,
    ::flatbuffers::Offset<PropsFB::PropDict> key_value = 0) {
  PropsRowBuilder builder_(_fbb);
  builder_.add_parent_uid(parent_uid);
  builder_.add_prop_uid(prop_uid);
  builder_.add_key_value(key_value);
  builder_.add_prop_type(prop_type);
  return builder_.Finish();
}

struct PropsPool FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PropsPoolBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROPS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<PropsFB::PropsRow>> *props() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<PropsFB::PropsRow>> *>(VT_PROPS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PROPS) &&
           verifier.VerifyVector(props()) &&
           verifier.VerifyVectorOfTables(props()) &&
           verifier.EndTable();
  }
};

struct PropsPoolBuilder {
  typedef PropsPool Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_props(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<PropsFB::PropsRow>>> props) {
    fbb_.AddOffset(PropsPool::VT_PROPS, props);
  }
  explicit PropsPoolBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PropsPool> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PropsPool>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PropsPool> CreatePropsPool(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<PropsFB::PropsRow>>> props = 0) {
  PropsPoolBuilder builder_(_fbb);
  builder_.add_props(props);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PropsPool> CreatePropsPoolDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<PropsFB::PropsRow>> *props = nullptr) {
  auto props__ = props ? _fbb.CreateVector<::flatbuffers::Offset<PropsFB::PropsRow>>(*props) : 0;
  return PropsFB::CreatePropsPool(
      _fbb,
      props__);
}

inline const PropsFB::PropsPool *GetPropsPool(const void *buf) {
  return ::flatbuffers::GetRoot<PropsFB::PropsPool>(buf);
}

inline const PropsFB::PropsPool *GetSizePrefixedPropsPool(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PropsFB::PropsPool>(buf);
}

inline bool VerifyPropsPoolBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PropsFB::PropsPool>(nullptr);
}

inline bool VerifySizePrefixedPropsPoolBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PropsFB::PropsPool>(nullptr);
}

inline void FinishPropsPoolBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PropsFB::PropsPool> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPropsPoolBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PropsFB::PropsPool> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace PropsFB

#endif  // FLATBUFFERS_GENERATED_PROPS_PROPSFB_H_
